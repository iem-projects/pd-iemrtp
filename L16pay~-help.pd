#N canvas 122 165 800 425 10;
#X obj 116 252 L16pay~ 2;
#X msg 575 49 \; pd dsp \$1;
#X obj 575 27 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 116 104 sig~ 1;
#X obj 175 104 osc~ 440;
#X obj 207 235 t a;
#X text 114 17 [L16pay~] RTP-payloader for audio/L16 profile (16bit
signed);
#X text 118 44 args: #channels;
#X obj 236 235 r \$0-ctl;
#N canvas 449 171 645 357 getters 0;
#X msg 79 61 version;
#X msg 79 83 padding;
#X msg 79 105 extension;
#X msg 79 127 cc;
#X msg 79 149 marker;
#X msg 79 171 payload_type;
#X msg 79 193 sequence_number;
#X msg 79 215 timestamp;
#X msg 79 237 SSRC;
#X msg 79 259 CSRC;
#X obj 79 289 t a;
#X obj 79 311 s \$0-ctl;
#X text 85 32 (these commands are variants of the "setter" methods
\, that take extra arguments to set the specified values);
#X text 99 15 getting info on the current RTP packet header;
#X text 198 131 print the current value of the given field to the Pd-console
;
#X connect 0 0 10 0;
#X connect 1 0 10 0;
#X connect 2 0 10 0;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 6 0 10 0;
#X connect 7 0 10 0;
#X connect 8 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X restore 487 243 pd getters;
#N canvas 275 141 645 357 setters 0;
#X obj 79 289 t a;
#X obj 79 311 s \$0-ctl;
#X text 99 15 setting info in the next RTP packet header;
#X text 85 32 (these commands are variants of the "getter" methods
\, that take no arguments);
#X msg 79 61 version 2;
#X msg 79 83 padding 0;
#X msg 79 105 extension 0;
#X msg 79 237 cc 5;
#X msg 79 259 CSRC 2 127 12;
#X text 182 257 <slot> <IDhi> <IDlo>: write given CSRC-id (127<<16+12=0x007F000C)
into slot. (number of slots will be resized if needed);
#X text 184 238 set the number of CSRC-ids (and initialize new ones
to 0);
#X msg 79 217 SSRC 712 321;
#X text 186 222 <IDhi> <IDlo>: set the SSRC-id (712<<16+321 = 0x02C80141)
;
#X msg 79 195 timestamp 1024 0;
#X msg 79 173 sequence_number 21;
#X text 219 167 <seq>: set sequence number (will be automatically incremented
for each packet);
#X text 210 192 <TShi> <TSlo>: set timestamp (1024<<16+0 = 0x04000000)
\; will be automatically incremented each DSP-cycle;
#X msg 79 151 payload_type 96;
#X text 224 149 <pt>: set payload type (96);
#X msg 79 129 marker 1;
#X text 221 132 <1|0>: set marker-bit;
#X text 224 106 set extension bit (0);
#X text 227 85 set padding bit (0);
#X text 229 61 set version (only version=2 is supported);
#X connect 0 0 1 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 8 0 0 0;
#X connect 11 0 0 0;
#X connect 13 0 0 0;
#X connect 14 0 0 0;
#X connect 17 0 0 0;
#X connect 19 0 0 0;
#X restore 487 223 pd setters;
#X msg 282 134 bang;
#X msg 281 181 auto \$1;
#X obj 281 162 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 339 171 start/stop outputting DSP-blocks as RTP-packets;
#X text 320 136 output a single DSP-block as RTP-packet (the *next*
DSP-block);
#N canvas 4 49 867 331 packet 0;
#X msg 79 54 mtu 1500;
#X obj 79 76 s \$0-ctl;
#X text 149 52 set the maximum packet size.;
#X text 89 131 the payloader will try to put the entire sample block
(num.channels*blocksize*samplewidth(=2) bytes) into a single packet.
if this packet is larger than the specified MTU size \, it will output
multiple packets instead.;
#X text 88 203 in an ordinary ethernet network \, the maximum packet
size is limited to 1500 bytes (the default MTU size).;
#X connect 0 0 1 0;
#X restore 487 272 pd packet size;
#X obj 116 274 spigot;
#X obj 116 296 print RTP;
#X obj 169 275 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 187 276 <-- might block Pd-GUI...;
#X text 115 366 for interpreting the RTP-packet \, see;
#X obj 376 367 rtpparse;
#X connect 0 0 17 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 4 0 0 1;
#X connect 5 0 0 0;
#X connect 8 0 5 0;
#X connect 11 0 5 0;
#X connect 12 0 0 0;
#X connect 13 0 12 0;
#X connect 17 0 18 0;
#X connect 19 0 17 1;
